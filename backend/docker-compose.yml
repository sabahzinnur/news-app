version: '3.7'
services:
  php:
    build: ./docker/dev/services/php
    container_name: php
    restart: unless-stopped
    networks:
      - traefik_network
      - backend
    links:
      - elastic
    volumes:
      - './:/var/www'
      - './docker/dev/services/php/php-ini-overrides.ini:/usr/local/etc/php/conf.d/99-overrides.ini:ro'

  nginx:
    build: ./docker/dev/services/nginx
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./:/var/www:ro
      - ./docker/dev/services/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - traefik_network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.entrypoints=http'
      - 'traefik.http.routers.api.rule=Host(`${DOCKER_API_DOMAIN}`)'

  postgres:
    image: library/postgres:12.2-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - traefik_network
    volumes:
      - ./docker/database/pg:/var/lib/postgresql/data

  elastic:
    image: elasticsearch:7.5.2
    container_name: es
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
    ports:
      - 9200:9200
    networks:
      - backend

  traefik:
    image: traefik:2.0
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - postgres
      - php
      - nginx
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.http.address=:80'
    ports:
      - 80:80
      - 8000:8080
    networks:
      - traefik_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  traefik_network:
    driver: bridge
  backend:
    driver: bridge
